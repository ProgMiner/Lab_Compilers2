-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun void (c) { [c, Z] }

fun eval (c@[s, w], expr) {
  case expr of
    Assn (v, x) -> case evalList (c, {v, x}) of
      [[s, w], {v, x}] -> [[s <- [v, x], w], x]
    esac
  | Seq (l, r) -> case evalList (c, {l, r}) of
      [c, {_, x}] -> [c, x]
    esac
  | Skip -> void (c)
  | Read (v) -> case w.readWorld of
      [x, w] -> void ([s <- [v, x], w])
    esac
  | Write (x) -> case eval (c, x) of
      [c, x] -> void ([s, writeWorld (x, w)])
    esac
  | If (cond, t, f) -> case eval (c, cond) of
      [c, cond] -> if cond then eval (c, t) else eval (c, f) fi
    esac
  | While (cond, b) -> case eval (c, cond) of
      [c, cond] -> if cond then eval (eval (c, b) [0], expr) else void (c) fi
    esac
  | DoWhile (b, cond) -> case eval (eval (c, b) [0], cond) of
      [c, cond] -> if cond then eval (c, expr) else void (c) fi
    esac
  | Var   (v) -> [c, s (v)]
  | Ref   (v) -> [c, v]
  | Const (x) -> [c, x]
  | Binop (op, l, r) -> case evalList (c, {l, r}) of
      [c, {l, r}] -> [c, evalOp (op, l, r)]
    esac
  | Ignore (x) -> case eval (c, x) of
      [c, _] -> void (c)
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  -- printf ("%s\n", string (expr));
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
