-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)
--      | Set     (string, expr)
--      | Seq     (expr, expr)
--      | Skip
--      | If      (expr, expr, expr)
--      | While   (expr, expr)
--      | DoWhile (expr, expr)
--      | Var     (string)
--      | Ref     (string)
--      | Const   (int)
--      | Binop   (string, expr, expr)
--      | Scope   (def list, expr)
--      | Call    (string, expr list)
--      | Ignore  (expr)
--      | String  (string)
--      | Array   (expr list)
--      | Sexp    (string, expr list)
--      | Elem    (expr, expr)
--      | ElemRef (expr, expr)
--      | Case    (string, pattern and expr list, bool)
--      | External
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Val (string)
--     | Var (string)
--     | Fun (string, string list, expr)
--
-- pattern = Array  (pattern list)
--         | String (string)
--         | Const  (int)
--         | Sexp   (string, pattern list)
--         | Named  (string, pattern)
--         | Wildcard

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    Val (x) -> x
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun void (c) { [c, Z] }

fun matchArrayPattern (xs, ps) {
  if length (xs) == size (ps)
  then foldl (fun (acc, [x, p]) { acc && matchPattern (x, p) }
             , true
             , zip (arrayList (xs), ps)
             )
  else false
  fi
}

fun matchPattern (x, p) {
  case p of
    Array (ps) -> case x of
      #array -> matchArrayPattern (x, ps)
    | _ -> false
    esac
  | String (s) -> case x of
      #str -> compare (x, s) == 0
    | _ -> false
    esac
  | Const (n) -> case x of
      #val -> x == n
    | _ -> false
    esac
  | Sexp (s, ps) -> case x of
      Sexp (l, xs) -> compare (s, l) == 0 && matchArrayPattern (xs, ps)
    | _ -> false
    esac
  | Named (_, p) -> matchPattern (x, p)
  | Wildcard -> true
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (v, x) -> case evalList (c, {v, x}) of
      [[s, w], {v, x}] -> case v of
        [xs, i] -> xs [i] := x; [[s, w], x]
      | _ -> [[s <- [v, Val (x)], w], x]
      esac
    esac
  | Set (v, x) -> case eval (c, x) of
      [[s, w], x] -> void ([s <- [v, Val (x)], w])
    esac
  | Seq (l, r) -> case evalList (c, {l, r}) of
      [c, {_, x}] -> [c, x]
    esac
  | Skip -> void (c)
  | If (cond, t, f) -> case eval (c, cond) of
      [c, cond] -> if cond then eval (c, t) else eval (c, f) fi
    esac
  | While (cond, b) -> case eval (c, cond) of
      [c, cond] -> if cond then eval (eval (c, b) [0], expr) else void (c) fi
    esac
  | DoWhile (b, cond) -> case eval (eval (c, b) [0], cond) of
      [c, cond] -> if cond then eval (c, expr) else void (c) fi
    esac
  | Var   (v) -> [c, lookupVal (s, v)]
  | Ref   (v) -> lookupVal (s, v); [c, v]
  | Const (x) -> [c, x]
  | Binop (op, l, r) -> case evalList (c, {l, r}) of
      [c, {l, r}] -> [c, evalOp (op, l, r)]
    esac
  | Scope (ds, e) ->
      case foldl (fun (s, d) {
        case d of
          Val (x) -> addName (s, x, Val (0))
        | Var (x) -> addName (s, x, Val (0))
        | Fun (f, xs, e) -> addFunction (s, f, xs, e)
        esac
      }, enterScope (s), ds) of
        s -> case eval ([s, w], e) of
          [[s, w], res] -> [[leaveScope (s), w], res]
        esac
      esac
  | Call (f, es) -> case lookupFun (s, f) of
      Fun (_, External) -> case evalList (c, es) of
        [[s, w], vs] -> case evalBuiltin (f, vs, w) of
          [x, w] -> [[s, w], x]
        esac
      esac
    | Fun (xs, e) -> case evalList (c, es) of
      [[s, w], vs] -> case foldl (fun (s, [x, v]) {
          addName (s, x, Val (v))
        }, enterFunction (s), zip (xs, vs)) of
          sLocal -> case eval ([sLocal, w], e) of
            [[sLocal, w], res] -> [[leaveFunction (s, getGlobal (sLocal)), w], res]
          esac
        esac
      esac
    esac
  | Ignore (x) -> case eval (c, x) of
      [c, _] -> void (c)
    esac
  | String (s) -> [c, clone (s)]
  | Array (xs) -> case evalList (c, xs) of
      [c, xs] -> [c, listArray (xs)]
    esac
  | Sexp (s, xs) -> case evalList (c, xs) of
      [c, xs] -> [c, Sexp (s, listArray (xs))]
    esac
  | Elem (xs, i) -> case evalList (c, {xs, i}) of
      [c, {Sexp (_, xs), i}] -> [c, xs [i]]
    | [c, {xs, i}] -> [c, xs [i]]
    esac
  | ElemRef (xs, i) -> case evalList (c, {xs, i}) of
      [c, {Sexp (_, xs), i}] -> [c, [xs, i]]
    | [c, {xs, i}] -> [c, [xs, i]]
    esac
  | Case (xName, bs, _) -> case lookupVal (s, xName) of
      x -> foldr (fun (next, [p, br]) { fun () {
        if matchPattern (x, p)
        then eval (c, br)
        else next ()
        fi
      } }, fun () {
        error (sprintf ("match failure (value %s)", string (x)), getLoc (xName))
      }, bs) ()
    esac
  | _ -> failure (sprintf ("evalExpr not implemented: %s\n", string (expr)))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
