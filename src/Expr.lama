-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var   (x)   -> st (x)
  | Const (x)   -> x
  | Binop (op, lhs, rhs) ->
    var lv = evalExpr (st, lhs);
    var rv = evalExpr (st, rhs);

    case op of
      "+" -> lv + rv
    | "-" -> lv - rv
    | "*" -> lv * rv
    | "/" -> lv / rv
    | "%" -> lv % rv
    | "==" -> lv == rv
    | "!=" -> lv != rv
    | "<" -> lv < rv
    | "<=" -> lv <= rv
    | ">" -> lv > rv
    | ">=" -> lv >= rv
    | "!!" -> lv !! rv
    | "&&" -> lv && rv
    esac
  esac
}
