-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  fun (l) {
    case findMap (map, l) of
      Some (insns) -> insns
    | _ -> failure ("no label ""%s""\n", l)
    esac
  }
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [stack, st, w], insns) {
  case insns of
    {} -> [stack, st, w]
  | ins:insns -> case ins of
      READ       -> case readWorld (w) of [x, w] -> eval (env, [x:stack, st, w], insns) esac
    | WRITE      -> case stack of v:stack -> eval (env, [stack, st, writeWorld (v, w)], insns) esac
    | BINOP (op) -> case stack of
      b:a:stack ->
        var res = case op of
          "+" -> a + b
        | "-" -> a - b
        | "*" -> a * b
        | "/" -> a / b
        | "%" -> a % b
        | "==" -> a == b
        | "!=" -> a != b
        | "<" -> a < b
        | "<=" -> a <= b
        | ">" -> a > b
        | ">=" -> a >= b
        | "!!" -> a !! b
        | "&&" -> a && b
        esac;

        eval (env, [res:stack, st, w], insns)
      esac
    | LD    (x)  -> eval (env, [st (x):stack, st, w], insns)
    | ST    (x)  -> case stack of v:stack -> eval (env, [stack, st <- [x, v], w], insns) esac
    | CONST (v)  -> eval (env, [v:stack, st, w], insns)
    | LABEL (l)  -> eval (env, [stack, st, w], insns)
    | JMP   (l)  -> eval (env, [stack, st, w], env (l))
    | CJMP  (c, l) -> case stack of
      v:stack ->
        var jmp = case [c, v] of
          ["z",  0] -> true
        | ["z",  _] -> false
        | ["nz", 0] -> false
        | ["nz", _] -> true
        | _ -> failure ("unknown CJMP type ""\s""\n", c)
        esac;

        eval (env, [stack, st, w], if jmp then env (l) else insns fi)
      esac
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf ("%s\n", showSM (insns));
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)   -> singletonBuffer (LD (x))
  | Const (x)   -> singletonBuffer (CONST (x))
  | Binop (op, lhs, rhs) -> compileExpr (lhs) <+> compileExpr (rhs)
    <+> singletonBuffer (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If   (c, t, f) -> case env.genLabel of
        [eLab, env] -> case compile (lab, env, t) of
          [labUsed1, env, tCode] -> case compile (lab, env, f) of
            [labUsed2, env, fCode] -> [true, env,
              compileExpr (c)
              <+ CJMP ("z", eLab)
              <+> tCode
              <+ JMP (lab)
              <+ LABEL (eLab)
              <+> fCode
            ]
          esac
        esac
      esac
    | While   (c, b) -> case env.genLabel of
        [cLab, env] -> case env.genLabel of
          [bLab, env] -> case compile (cLab, env, b) of
            [cLabUsed, env, bCode] -> [false, env,
              emptyBuffer ()
              <+ JMP (cLab)
              <+ LABEL (bLab)
              <+> bCode
              <+ LABEL (cLab)
              <+> compileExpr (c)
              <+ CJMP ("nz", bLab)
            ]
          esac
        esac
      esac
    | DoWhile (b, c) -> failure ("do-while compileSM\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
