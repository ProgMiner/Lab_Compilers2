-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, st, w], insns) {
  case insns of
    {} -> [stack, st, w]
  | ins:insns -> case ins of
      READ       -> case readWorld (w) of [x, w] -> eval ([x:stack, st, w], insns) esac
    | WRITE      -> case stack of v:stack -> eval ([stack, st, writeWorld (v, w)], insns) esac
    | BINOP (op) -> case stack of b:a:stack ->
        var res = case op of
          "+" -> a + b
        | "-" -> a - b
        | "*" -> a * b
        | "/" -> a / b
        | "%" -> a % b
        | "==" -> a == b
        | "!=" -> a != b
        | "<" -> a < b
        | "<=" -> a <= b
        | ">" -> a > b
        | ">=" -> a >= b
        | "!!" -> a !! b
        | "&&" -> a && b
        esac;

        eval ([res:stack, st, w], insns)
      esac
    | LD    (x)  -> eval ([st (x):stack, st, w], insns)
    | ST    (x)  -> case stack of v:stack -> eval ([stack, st <- [x, v], w], insns) esac
    | CONST (v)  -> eval ([v:stack, st, w], insns)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)   -> { LD (x) }
  | Const (x)   -> { CONST (x) }
  | Binop (op, lhs, rhs) -> BINOP (op):compileExpr (rhs) +++ compileExpr (lhs)
  esac
}

public fun compileStmt (stmt) {
  case stmt of
    Assn  (x, v) -> ST (x):compileExpr (v)
  | Seq   (a, b) -> compileStmt (b) +++ compileStmt (a)
  | Skip         -> {}
  | Read  (x)    -> { ST (x), READ }
  | Write (x)    -> WRITE:compileExpr (x)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  reverse (compileStmt (stmt))
}
